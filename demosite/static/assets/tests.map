{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","super-rentals/tests/acceptance/list-rentals-test.js","super-rentals/tests/helpers/setup-mirage-for-unit-test.js","super-rentals/tests/integration/components/list-filter-test.js","super-rentals/tests/integration/components/location-map-test.js","super-rentals/tests/integration/components/rental-listing-test.js","super-rentals/tests/integration/components/rental-property-type-test.js","super-rentals/tests/lint/app.lint-test.js","super-rentals/tests/lint/templates.template.lint-test.js","super-rentals/tests/lint/tests.lint-test.js","super-rentals/tests/test-helper.js","super-rentals/tests/unit/adapters/application-test.js","super-rentals/tests/unit/controllers/rentals/index-test.js","super-rentals/tests/unit/models/rental-test.js","super-rentals/tests/unit/routes/about-test.js","super-rentals/tests/unit/routes/contact-test.js","super-rentals/tests/unit/routes/index-test.js","super-rentals/tests/unit/routes/rentals-test.js","super-rentals/tests/unit/routes/rentals/index-test.js","super-rentals/tests/unit/routes/rentals/show-test.js","super-rentals/tests/unit/services/map-element-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"super-rentals/tests/acceptance/list-rentals-test\", [\"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _setupMirage, _testHelpers) {\n  \"use strict\";\n\n  let StubMapsService = Ember.Service.extend({\n    getMapElement() {\n      return Ember.RSVP.resolve(document.createElement('div'));\n    }\n\n  });\n  (0, _qunit.module)('Acceptance | list rentals', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('service:map-element', StubMapsService);\n    });\n    (0, _qunit.test)('should redirect to rentals route', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal((0, _testHelpers.currentURL)(), '/rentals', 'should redirect automatically');\n    });\n    (0, _qunit.test)('should link to information about the company', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      await (0, _testHelpers.click)(\".menu-about\");\n      assert.equal((0, _testHelpers.currentURL)(), '/about', 'should navigate to about');\n    });\n    (0, _qunit.test)('should link to contact information', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      await (0, _testHelpers.click)(\".menu-contact\");\n      assert.equal((0, _testHelpers.currentURL)(), '/contact', 'should navigate to contact');\n    });\n    (0, _qunit.test)('should list available rentals', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      assert.equal(this.element.querySelectorAll('.results .listing').length, 3, 'should display 3 listings');\n    });\n    (0, _qunit.test)('should filter the list of rentals by city', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n      await (0, _testHelpers.fillIn)('.list-filter input', 'seattle');\n      await (0, _testHelpers.triggerKeyEvent)('.list-filter input', 'keyup', 69);\n      assert.ok(this.element.querySelectorAll('.results .listing').length, 1, 'should display 1 listing');\n      assert.ok(this.element.querySelector('.listing .location').textContent.includes('Seattle'), 'should contain 1 listing with location Seattle');\n    });\n    (0, _qunit.test)('should show details for a specific rental', async function (assert) {\n      await (0, _testHelpers.visit)('/rentals');\n      await (0, _testHelpers.click)(\".grand-old-mansion\");\n      assert.equal((0, _testHelpers.currentURL)(), '/rentals/grand-old-mansion', \"should navigate to show route\");\n      assert.ok(this.element.querySelector('.show-listing h2').textContent.includes(\"Grand Old Mansion\"), 'should list rental title');\n      assert.ok(this.element.querySelector('.show-listing .description'), 'should list a description of the property');\n    });\n  });\n});","define(\"super-rentals/tests/helpers/setup-mirage-for-unit-test\", [\"exports\", \"super-rentals/initializers/ember-cli-mirage\"], function (_exports, _emberCliMirage) {\n  \"use strict\";\n\n  Object.defineProperty(_exports, \"__esModule\", {\n    value: true\n  });\n  _exports.default = startMirage;\n\n  function startMirage(container) {\n    _emberCliMirage.default.initialize(container);\n  }\n});","define(\"super-rentals/tests/integration/components/list-filter-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | list-filter', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.actions = {};\n\n      this.send = (actionName, ...args) => this.actions[actionName].apply(this, args);\n    });\n    const ITEMS = [{\n      city: 'San Francisco'\n    }, {\n      city: 'Portland'\n    }, {\n      city: 'Seattle'\n    }];\n    const FILTERED_ITEMS = [{\n      city: 'San Francisco'\n    }];\n    (0, _qunit.test)('should initially load all listings', async function (assert) {\n      assert.expect(2);\n      this.set('filterByCity', () => Ember.RSVP.resolve({\n        results: ITEMS\n      }));\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"7krCEaN/\",\n        \"block\": \"{\\\"symbols\\\":[\\\"results\\\",\\\"item\\\"],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"list-filter\\\",[],[[\\\"@filter\\\"],[[27,\\\"action\\\",[[22,0,[]],[23,[\\\"filterByCity\\\"]]],null]]],{\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[7,\\\"ul\\\"],[9],[0,\\\"\\\\n\\\"],[4,\\\"each\\\",[[22,1,[]]],null,{\\\"statements\\\":[[0,\\\"          \\\"],[7,\\\"li\\\"],[11,\\\"class\\\",\\\"city\\\"],[9],[0,\\\"\\\\n            \\\"],[1,[22,2,[\\\"city\\\"]],false],[0,\\\"\\\\n          \\\"],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null],[0,\\\"        \\\"],[10],[0,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.querySelectorAll('.city').length, 3);\n      assert.dom(this.element.querySelector('.city')).hasText('San Francisco');\n    });\n    (0, _qunit.test)('should update with matching listings', async function (assert) {\n      this.set('filterByCity', val => {\n        if (val === '') {\n          return Ember.RSVP.resolve({\n            query: val,\n            results: ITEMS\n          });\n        } else {\n          return Ember.RSVP.resolve({\n            query: val,\n            results: FILTERED_ITEMS\n          });\n        }\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"7krCEaN/\",\n        \"block\": \"{\\\"symbols\\\":[\\\"results\\\",\\\"item\\\"],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"list-filter\\\",[],[[\\\"@filter\\\"],[[27,\\\"action\\\",[[22,0,[]],[23,[\\\"filterByCity\\\"]]],null]]],{\\\"statements\\\":[[0,\\\"\\\\n        \\\"],[7,\\\"ul\\\"],[9],[0,\\\"\\\\n\\\"],[4,\\\"each\\\",[[22,1,[]]],null,{\\\"statements\\\":[[0,\\\"          \\\"],[7,\\\"li\\\"],[11,\\\"class\\\",\\\"city\\\"],[9],[0,\\\"\\\\n            \\\"],[1,[22,2,[\\\"city\\\"]],false],[0,\\\"\\\\n          \\\"],[10],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[2]},null],[0,\\\"        \\\"],[10],[0,\\\"\\\\n      \\\"]],\\\"parameters\\\":[1]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.fillIn)(this.element.querySelector('.list-filter input'), 's');\n      await (0, _testHelpers.triggerKeyEvent)(this.element.querySelector('.list-filter input'), \"keyup\", 83);\n      assert.equal(this.element.querySelectorAll('.city').length, 1, 'One result returned');\n      assert.dom(this.element.querySelector('.city')).hasText('San Francisco');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/location-map-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  let StubMapsService = Ember.Service.extend({\n    getMapElement(location) {\n      this.set('calledWithLocation', location);\n      let element = document.createElement('div');\n      element.className = 'map';\n      return Ember.RSVP.resolve(element);\n    }\n\n  });\n  (0, _qunit.module)('Integration | Component | location map', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('service:map-element', StubMapsService);\n      this.mapsService = this.owner.lookup('service:map-element');\n    });\n    (0, _qunit.test)('should append map element to container element', async function (assert) {\n      this.set('myLocation', 'New York');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"tkUWmWJl\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"location-map\\\",[],[[\\\"@location\\\"],[[21,\\\"myLocation\\\"]]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.ok(this.element.querySelector('.map-container > .map'), 'container should have map child');\n      assert.equal(this.get('mapsService.calledWithLocation'), 'New York', 'should call service with New York');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/rental-listing-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  let StubMapsService = Ember.Service.extend({\n    getMapElement() {\n      return Ember.RSVP.resolve(document.createElement('div'));\n    }\n\n  });\n  (0, _qunit.module)('Integration | Component | rental listing', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    hooks.beforeEach(function () {\n      this.owner.register('service:map-element', StubMapsService);\n      this.rental = {\n        image: 'fake.png',\n        title: 'test-title',\n        owner: 'test-owner',\n        type: 'test-type',\n        city: 'test-city',\n        bedrooms: 3\n      };\n    });\n    (0, _qunit.test)('should display rental details', async function (assert) {\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"KwHFrMJe\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"rental-listing\\\",[],[[\\\"@rental\\\"],[[21,\\\"rental\\\"]]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.dom(this.element.querySelector('.listing h3')).hasText('test-title', 'Title: test-title');\n      assert.dom(this.element.querySelector('.listing .owner')).hasText('Owner: test-owner', 'Owner: test-owner');\n    });\n    (0, _qunit.test)('should toggle wide class on click', async function (assert) {\n      assert.expect(3);\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"KwHFrMJe\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"rental-listing\\\",[],[[\\\"@rental\\\"],[[21,\\\"rental\\\"]]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.notOk(this.element.querySelector('.image.wide'), 'initially rendered small');\n      await (0, _testHelpers.click)('.image');\n      assert.ok(this.element.querySelector('.image.wide'), 'rendered wide after click');\n      await (0, _testHelpers.click)('.image');\n      assert.notOk(this.element.querySelector('.image.wide'), 'rendered small after second click');\n    });\n  });\n});","define(\"super-rentals/tests/integration/components/rental-property-type-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | rental property type', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it renders correctly for a Standalone rental', async function (assert) {\n      this.set('inputValue', 'Estate');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"PyyJ9viP\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[27,\\\"rental-property-type\\\",[[23,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'Standalone');\n    });\n    (0, _qunit.test)('it renders correctly for a Community rental', async function (assert) {\n      this.set('inputValue', 'Apartment');\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"PyyJ9viP\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[27,\\\"rental-property-type\\\",[[23,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'Community');\n    });\n  });\n});","define(\"super-rentals/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/list-filter.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/list-filter.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/location-map.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/location-map.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/rental-listing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/rental-listing.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/rentals.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/rentals.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/rentals/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/rentals/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/rental-property-type.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/rental-property-type.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/rental.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/rental.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/about.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/contact.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/contact.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/rentals.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rentals.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/rentals/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rentals/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/rentals/show.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/rentals/show.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('services/map-element.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/map-element.js should pass ESLint\\n\\n');\n  });\n});","define(\"super-rentals/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('super-rentals/templates/about.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/about.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/components/list-filter.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/components/list-filter.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/components/location-map.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/components/location-map.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/components/rental-listing.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/components/rental-listing.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/contact.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/contact.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/rentals.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/rentals.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/rentals/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/rentals/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('super-rentals/templates/rentals/show.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'super-rentals/templates/rentals/show.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"super-rentals/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('acceptance/list-rentals-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/list-rentals-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('helpers/setup-mirage-for-unit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/setup-mirage-for-unit-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/list-filter-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/list-filter-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/location-map-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/location-map-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/rental-listing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rental-listing-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/rental-property-type-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/rental-property-type-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/rentals/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/rentals/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/rental-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/rental-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/about-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/contact-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/contact-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/rentals-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rentals-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/rentals/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rentals/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/rentals/show-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/rentals/show-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/services/map-element-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/map-element-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"super-rentals/tests/test-helper\", [\"super-rentals/app\", \"super-rentals/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"super-rentals/tests/unit/adapters/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"super-rentals/tests/unit/controllers/rentals/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | rentals/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:rentals/index');\n      assert.ok(controller);\n    });\n  });\n});","define(\"super-rentals/tests/unit/models/rental-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | rental', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let model = Ember.run(() => this.owner.lookup('service:store').createRecord('rental')); // let store = this.get('store')();\n\n      assert.ok(!!model);\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/about-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | about', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:about');\n      assert.ok(route);\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/contact-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | contact', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:contact');\n      assert.ok(route);\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Unit | Route | index\", function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)(\"should transition to rentals route\", function (assert) {\n      let route = this.owner.factoryFor(\"route:index\").create({\n        transitionTo(routeName) {\n          assert.equal(routeName, \"rentals\", \"transition to route name rentals\");\n        }\n\n      });\n      route.beforeModel();\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/rentals-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | rentals', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:rentals');\n      assert.ok(route);\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/rentals/index-test\", [\"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_qunit, _emberQunit, _setupMirage) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | rentals/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('should load all rentals', function (assert) {\n      let route = this.owner.lookup('route:rentals/index');\n      return Ember.run(() => {\n        return route.model().then(results => {\n          assert.equal(results.get('length'), 3);\n        });\n      });\n    });\n  });\n});","define(\"super-rentals/tests/unit/routes/rentals/show-test\", [\"qunit\", \"ember-qunit\", \"ember-cli-mirage/test-support/setup-mirage\"], function (_qunit, _emberQunit, _setupMirage) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | rentals/show', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n    (0, _qunit.test)('should load rental by id', function (assert) {\n      let route = this.owner.lookup('route:rentals/show');\n      return Ember.run(() => {\n        return route.model({\n          rental_id: 'grand-old-mansion'\n        }).then(result => {\n          assert.equal(result.get('title'), \"Grand Old Mansion\");\n        });\n      });\n    });\n  });\n});","define(\"super-rentals/tests/unit/services/map-element-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  const DUMMY_ELEMENT = {};\n  (0, _qunit.module)('Unit | Service | maps', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('should create a new map if one isnt cached for location', async function (assert) {\n      assert.expect(5);\n      let stubMapService = {\n        createMap(element, coords) {\n          assert.ok(element, 'createMap called with element');\n          assert.deepEqual(coords, [0, 0], 'createMap given coordinates');\n          return DUMMY_ELEMENT;\n        }\n\n      };\n      let stubGeocodeService = {\n        fetchCoordinates(location) {\n          assert.equal(location, 'San Francisco', 'fetchCoordinates called with location');\n          return Ember.RSVP.resolve([0, 0]);\n        }\n\n      };\n      let mapService = this.owner.factoryFor('service:map-element').create({\n        map: stubMapService,\n        geocode: stubGeocodeService\n      });\n      let element = await mapService.getMapElement('San Francisco');\n      assert.ok(element, 'element exists');\n      assert.equal(element.className, 'map', 'element has class name of map');\n    });\n    (0, _qunit.test)('should use existing map if one is cached for location', async function (assert) {\n      assert.expect(1);\n      let stubCachedMaps = {\n        sanFrancisco: DUMMY_ELEMENT\n      };\n      let mapService = this.owner.factoryFor('service:map-element').create({\n        cachedMaps: stubCachedMaps\n      });\n      let element = await mapService.getMapElement('San Francisco');\n      assert.deepEqual(element, DUMMY_ELEMENT, 'element fetched from cache');\n    });\n  });\n});","define('super-rentals/config/environment', [], function() {\n  var prefix = 'super-rentals';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('super-rentals/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxvEA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}